#!/bin/bash

export QT_VERSION=5.15.1
export QT_CREATOR_VERSION=4.12
export QT_CREATOR_SUB_VERSION=1

export SRC_DIR="$HOME/Documents/repos"
export BUILD_DIR="$HOME/Documents/build"
export EXTRA_ARGS=-j1

cd $SRC_DIR

if [ ! -d "$BUILD_DIR" ]; then
    mkdir $BUILD_DIR
fi

qt() {

sudo apt -y install python3-pip python3.8 p7zip-full
python3.8 -m pip install aqtinstall

if [ ! -d "Qt" ]; then
    python3.8 -m aqt install $QT_VERSION linux desktop -m qtwebengine 
    mv $QT_VERSION Qt
fi

if [ ! -d "qtshadertools" ]; then
    git clone --recursive https://github.com/jcelerier/qtshadertools.git
    (       
        cd qtshadertools
        $SRC_DIR/Qt/gcc_64/bin/qmake && make $EXTRA_ARGS
        make install
    )   
fi

#wget mirrors.ukfast.co.uk/sites/qt.io/online/qtsdkrepository/linux_x64/desktop/qt5_5142/#qt.qt5.5142.qtwebengine.gcc_64/5.14.2-0-202003291222qtwebengine-Linux-RHEL_7_6-GCC-Linux-RHEL_7_6-#X86_64.7z

#7z x 5.14.2-0-202003291222qtwebengine-Linux-RHEL_7_6-GCC-Linux-RHEL_7_6-X86_64.7z

if [ ! -d "qtcreator" ]; then
    mkdir qtcreator
    (
        cd qtcreator
        wget https://download.qt.io/official_releases/qtcreator/$QT_CREATOR_VERSION/$QT_CREATOR_VERSION.$QT_CREATOR_SUB_VERSION/installer_source/linux_gcc_64_rhel72/qtcreator.7z
        7z x qtcreator.7z
        rm -rf qtcreator.7z
    )
fi

}

faust() {

if [ ! -d "faust" ]; then
    git clone --recursive https://github.com/grame-cncm/faust.git
fi

(
cd faust/build
echo '
set ( ASMJS_BACKEND  OFF CACHE STRING  "Include ASMJS backend" FORCE )
set ( C_BACKEND      COMPILER STATIC DYNAMIC        CACHE STRING  "Include C backend"         FORCE )
set ( CPP_BACKEND    COMPILER STATIC DYNAMIC        CACHE STRING  "Include CPP backend"       FORCE )
set ( FIR_BACKEND    OFF        CACHE STRING  "Include FIR backend"       FORCE )
set ( INTERP_BACKEND OFF        CACHE STRING  "Include INTERPRETER backend" FORCE )
set ( JAVA_BACKEND   OFF        CACHE STRING  "Include JAVA backend"      FORCE )
set ( JS_BACKEND     OFF        CACHE STRING  "Include JAVASCRIPT backend" FORCE )
set ( LLVM_BACKEND   COMPILER STATIC DYNAMIC        CACHE STRING  "Include LLVM backend"      FORCE )
set ( OLDCPP_BACKEND OFF        CACHE STRING  "Include old CPP backend"   FORCE )
set ( RUST_BACKEND   OFF        CACHE STRING  "Include RUST backend"      FORCE )
set ( WASM_BACKEND   OFF   CACHE STRING  "Include WASM backend"  FORCE )
' > backends/llvm.cmake
)

(
cd $BUILD_DIR

if [ ! -d "faust" ]; then
   mkdir faust
fi

cd faust

cmake -C $SRC_DIR/faust/build/backends/llvm.cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DINCLUDE_STATIC=1 -DINCLUDE_OSC=1 -DINCLUDE_HTTP=1 -DINCLUDE_EXECUTABLE=1 $SRC_DIR/faust/build 
make $EXTRA_ARGS
sudo make install
)

}

score() {

sudo apt -y install libportmidi0 libasound-dev mesa-common-dev libavahi-compat-libdnssd-dev lilv-utils libavcodec-dev libavformat-dev libavfilter-dev libavdevice-dev

if [ ! -d "Qt" ]; then
    qt
fi

if [ ! -d "faust" ]; then
    faust
fi

if [ ! -d "score" ]; then
    git clone --recursive https://github.com/OSSIA/score.git 
fi

if [ ! -d "score-user-library" ]; then
    git clone --recursive https://github.com/OSSIA/score-user-library.git
fi

(
cd $BUILD_DIR

if [ ! -d "score" ]; then
   mkdir score
fi

cd score

cmake $SRC_DIR/score -DCMAKE_PREFIX_PATH=$SRC_DIR/Qt/gcc_64 -DSCORE_CONFIGURATION=static-release -DPORTAUDIO_ONLY_DYNAMIC=1 -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
make $EXTRA_ARGS
rm -rf *.deb
cpack
sudo dpkg -i *.deb
)
 
}

ossia() {

sudo apt -y install libavahi-compat-libdnssd-dev

if [ ! -d "score" ]; then
    score
fi

if [ ! -d "openFrameworks" ]; then
    of
fi

(
cd openFrameworks/addons
if [ ! -d "ofxOscQuery" ]; then
   git clone --recursive https://github.com/bltzr/ofxOscQuery.git
fi
)

(
cd $BUILD_DIR

if [ ! -d "ossia-cpp" ]; then
   mkdir ossia-cpp
fi
(
cd ossia-cpp

cmake $SRC_DIR/score/3rdparty/libossia -DCMAKE_PREFIX_PATH=$SRC_DIR/Qt/gcc_64 -DOSSIA_CPP_ONLY=1 -DOSSIA_STATIC=1 -DOSSIA_PROTOCOL_ARTNET=0 -DOSSIA_PROTOCOL_AUDIO=0 -DOSSIA_PROTOCOL_JOYSTICK=0 -DOSSIA_PROTOCOL_WIIMOTE=0 -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
make $EXTRA_ARGS

 if [ ! -d "$SRC_DIR/openFrameworks/addons/ofxOscQuery/libs/ossia/lib/linux64/" ]; then
     mkdir -p $SRC_DIR/openFrameworks/addons/ofxOscQuery/libs/ossia/lib/linux64/
 fi

if [ ! -d "$SRC_DIR/openFrameworks/addons/ofxOscQuery/libs/ossia/include/" ]; then
    mkdir $SRC_DIR/openFrameworks/addons/ofxOscQuery/libs/ossia/include/
fi

cp src/libossia.a $SRC_DIR/openFrameworks/addons/ofxOscQuery/libs/ossia/lib/linux64/
cp $SRC_DIR/score/3rdparty/libossia/src/ossia-cpp/ossia-cpp98.hpp $SRC_DIR/openFrameworks/addons/ofxOscQuery/libs/ossia/include/
cp $BUILD_DIR/ossia-cpp/src/ossia_export.h $SRC_DIR/openFrameworks/addons/ofxOscQuery/libs/ossia/include/
)

if [ ! -d "ossia-pd" ]; then
    mkdir ossia-pd
fi
 
cd ossia-pd
 
cmake $SRC_DIR/score/3rdparty/libossia -DCMAKE_PREFIX_PATH=$SRC_DIR/Qt/gcc_64 -DOSSIA_PD_ONLY=1 -DOSSIA_PROTOCOL_ARTNET=0 -DOSSIA_PROTOCOL_AUDIO=0 -DOSSIA_PROTOCOL_JOYSTICK=0 -DOSSIA_PROTOCOL_WIIMOTE=0 -DOSSIA_PD_INSTALL_FOLDER=${HOME}/Documents/Pd/externals/ossia -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
make $EXTRA_ARGS
make install
)
}

supercollider() {

sudo apt -y install libavahi-client-dev libicu-dev libreadline6-dev libxt-dev \
#libboost-filesystem-dev libboost-program-options-dev libboost-regex-dev libboost-test-dev

if [ ! -d "supercollider" ]; then
    git clone --recursive https://github.com/scrime-u-bordeaux/supercollider.git
fi

(
cd $BUILD_DIR

if [ ! -d "supercollider" ]; then
   mkdir supercollider
fi

cd supercollider

cmake $SRC_DIR/supercollider -DCMAKE_PREFIX_PATH=$SRC_DIR/Qt/gcc_64 -DCMAKE_BUILD_TYPE=Release 
make $EXTRA_ARGS
sudo make install
)

sc3-plugins

}
 
sc3-plugins() {

if [ ! -d "sc3-plugins" ]; then
    git clone --recursive https://github.com/thibaudk/sc3-plugins.git
fi

if [ ! -d "adt" ]; then
    git clone https://bitbucket.org/ambidecodertoolbox/adt.git
    (
        cd adt
        octave adt_initialize
    )
fi

if [ ! -d "$HOME/.local/share/ATK/" ]; then
    mkdir $HOME/.local/share/ATK
    (
        cd $HOME/.local/share/ATK
        git clone https://github.com/ambisonictoolkit/atk-kernels.git
        git clone https://github.com/ambisonictoolkit/atk-matrices.git
        
        mv atk-kernels kernels
        mv atk-matrices matrices
    )
fi

(
cd $BUILD_DIR

if [ ! -d "sc3-plugins" ]; then
   mkdir sc3-plugins
fi

cd sc3-plugins

cmake $SRC_DIR/sc3-plugins -DSC_PATH=$SRC_DIR/supercollider -DCMAKE_BUILD_TYPE=Release -DLADSPA=0
make $EXTRA_ARGS
sudo make install
)

}

ardour() {

sudo apt -y purge ardour
sudo apt -y install python libgtkmm-2.4-dev autotools-dev cdbs dh-buildinfo devscripts libarchive-dev libaubio-dev libboost-dev libcppunit-dev libcurl3-gnutls libcurl4-gnutls-dev libglibmm-2.4-dev liblo-dev liblrdf0-dev libraptor2-dev librubberband-dev libsamplerate0-dev libsratom-dev libserd-dev libsord-dev libtag1-dev libcwiid-dev libxml2-dev itstool vamp-plugin-sdk

if [ ! -d "ardour" ]; then
    git clone --recursive https://github.com/ardour/ardour.git
fi

(
cd ardour

./waf configure --freedesktop --lxvst --lv2 --ptformat --nls --optimize --with-backend=alsa,jack,dummy 
./waf build $EXTRA_ARGS
sudo ./waf install
./tools/videotimeline/install_video_tools.sh 
)

}

zyn() {

sudo apt -y install ruby libtool libmxml-dev automake libz-dev mesa-common-dev libgl1-mesa-dev libfontconfig1-dev bison

if [ ! -d "zyn-fusion-build" ]; then
    git clone --recursive https://github.com/zynaddsubfx/zyn-fusion-build.git
fi

(
cd zyn-fusion-build

ruby build-linux.rb
tar xvf zyn-fusion-linux-64bit-3.0.3-patch1-release.tar.bz2
cd zyn-fusion
sudo bash ./install-linux.sh
)

}

guido() {

if [ ! -d guidolib ]; then
    git clone --reursive https://github.com/grame-cncm/guidolib.git 
fi

(
cd guidolib

cd $BUILD_DIR

if [ ! -d "guidolib" ]; then
   mkdir guidolib
fi

cd guidolib

cmake $SRC_DIR/guidolib/build -DGL=0 -DSTATICLIB=1 -DCMAKE_BUILD_TYPE=release
make $EXTRA_ARGS
sudo make install
)

if [ ! -d guidoar ]; then
   git clone https://github.com/grame-cncm/guidoar.git
fi

(
cd guidoar

cd $BUILD_DIR

if [ ! -d "guidoar" ]; then
   mkdir guidoar
fi

cd guidoar

cmake $SRC_DIR/guidoar/build -DCMAKE_BUILD_TYPE=release
make $EXTRA_ARGS
sudo make install
)

}

inscore() {

if [ ! -d guidolib ]; then
    guido
fi

if [ ! -d "inscore" ]; then
    git clone --recursive https://github.com/grame-cncm/inscore.git
fi

(
cd inscore

cd build 
make QMAKE=$SRC_DIR/Qt/gcc_64/bin/qmake $EXTRA_ARGS
sudo mv bin/inscoreviewer /usr/bin
sudo mv bin/lib* /usr/lib
)

}

osc() {

sudo apt install nodejs npm --edge

if [ ! -d "open-stage-control" ]; then
    git clone https://github.com/jean-emmanuel/open-stage-control.git
fi

(
cd open-stage-control

npm install

export PLATFORM=linux
npm run build
npm run package

rm -rf dist/open-stage-control-linux-x64/*.deb
npm run deb64
sudo dpkg -i dist/open-stage-control-linux-x64/*.deb
)

}

rack() {

sudo apt -y install gdb libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zlib1g-dev libgtk2.0-dev jq

if [ ! -d "Rack" ]; then
    git clone --recursive https://github.com/VCVRack/Rack.git
fi

(
cd Rack

make dep $EXTRA_ARGS

vcvPlugs

# if [ ! -d "Bridge" ]; then
#     git clone --recursive https://github.com/scrime-u-bordeaux/Bridge.git
# fi
# 
# cd Bridge/VST
# 
# if [ ! -d "VST2_SDK" ]; then
#     wget https://archive.org/download/VST2SDK/vstsdk2_4.zip
#     unzip vstsdk2_4.zip
#     mv vstsdk2.4 VST2_SDK
# fi
# 
# make dist $EXTRA_ARGS
# sudo make install
# 
# cd ../../

make $EXTRA_ARGS
sudo cp Rack /usr/bin/
cp Core.json ~/.Rack
cp -r res ~/.Rack
)

}

arduino() {

if [ -e "arduino" ]; then
    rm -rf arduino
fi

if [ -e "TeensyduinoInstall.linux64" ]; then
    rm -rf TeensyduinoInstall.linux64
    rm -rf 49-teensy.rules
fi

wget https://downloads.arduino.cc/arduino-1.8.12-linux64.tar.xz
tar -xJvf arduino-*-linux64.tar.xz -C .
rm -rf arduino-*-linux64.tar.xz
mv arduino* arduino
wget http://www.pjrc.com/teensy/49-teensy.rules
sudo cp 49-teensy.rules /etc/udev/rules.d/49-teensy.rules
rm -rf 49-teensy.rules

(
cd arduino
./arduino-linux-setup.sh $USER
sudo ./install.sh
)

wget https://www.pjrc.com/teensy/td_151/TeensyduinoInstall.linux64
chmod +x TeensyduinoInstall.linux64

echo "install Teensyduino in $SRC_DIR/arduino" 

./TeensyduinoInstall.linux64
rm -rf TeensyduinoInstall.linux64

}

processing() {

if [ -e "processing" ]; then
    rm -rf processing
fi

wget https://download.processing.org/processing-3.5.4-linux64.tgz
tar zxvf processing-3.5.4-linux64.tgz -C .
rm -rf processing-*-linux64.tgz
mv processing* processing

(
cd processing
sudo ./install.sh
)

}

of() {

if [ ! -d "qtcreator" ]; then
    qt
fi

if [ ! -d "openFrameworks" ]; then
   git clone --recursive https://github.com/openframeworks/openFrameworks.git
fi

(
cd openFrameworks/

sudo cp addons/libs/libfreenect/platform/linux/udev/51-kinect.rules /etc/udev/rules.d
sudo adduser $USER video

cd scripts/linux/ubuntu

sudo apt install -yy libc6 qbs libmpg123-dev
yes | sudo ./install_dependencies.sh
cd ../
./download_libs.sh
./compileOF.sh $EXTRA_ARGS
./compilePG.sh $EXTRA_ARGS
cd ../qtcreator/
./install_template.sh
)
}

repos_pull ()
{

python3.8 -m pip install aqtinstall --upgrade

    (
        cd $BUILD_DIR
        rm -rf *
    )
    
    # faust
    (
        if [ -d "faust" ]; then
            cd faust
            git pull
            git submodule update --init --recursive 
        fi
    )
    
    # score
    (
        if [ -d "score" ]; then
            (
                cd score 
                git pull    
                git submodule update --init --recursive 
            )
        fi

        if [ -d "score-user-library" ]; then 
            cd score-user-library
            git pull
        fi
    )
    
    # supercollider
    (
        if [ -d "wsclang" ]; then
            cd wsclang
            git pull
            git submodule update --init --recursive
        fi
    )

    # sc3-pluginsHOA
    (
        if [ -d "sc3-pluginsHOA" ]; then
            (
                cd sc3-pluginsHOA
                git pull
                git submodule update --init --recursive 
            )
        fi

        if [ -d "adt" ]; then
            cd adt
            git pull
        fi

        if [ -d "$HOME/.local/share/ATK/" ]; then
            cd $HOME/.local/share/ATK/kernels
            git pull
        
            cd ../matrices
            git pull
        fi
    )
    
    # ardour
    (
        if [ -d "ardour" ]; then
            cd ardour
            ./waf clean
            git pull
            git submodule update --init --recursive
        fi
    )
    
    # zyn
    (
        if [ -d "zyn-fusion-build" ]; then
            cd zyn-fusion-build
            git pull
            git submodule update --init --recursive
        fi
    )
    
    # guido
    (
        if [ -d "guidolib" ]; then
            cd guidolib
            git pull
        fi
        
        if [ -d "guidoar" ]; then
            cd guidoar
            git pull
        fi
    )
    
    # inscore
    (
        if [ -d "inscore" ]; then
            cd inscore/build
            make clean
            git pull
        fi
    )
    
    # osc
    (
        if [ -d "open-stage-control" ]; then
            cd open-stage-control
            git pull
        fi
    )
    
     # rack
    (
         if [ -d "Rack" ]; then
            cd Rack
            git pull
            git submodule update --init --recursive
            cp Core.json ~/.Rack
            cp -r res ~/.Rack
            
            (
            cd plugins
            for folder in * 
            do
            (
            cd $folder
            make clean  
            git pull
            git submodule update --init --recursive
            )
            done
             
#             cd ../Bridge/VST
#             if [ -d "Bridge" ]; then
#                 make clean
#                 cd ..
#                 git pull
#                 git submodule update --init --recursive
#             fi
            )
            
            make clean
            cd dep
            make clean 
        fi
    )
    
    (
        if [ -d "openframeworks" ]; then
            cd openframeworks
            git pull
            git submodule update --init --recursive
        fi
    )
}

repos_help() {

less << _EOF_

 Repos -- Debian/Ubuntu repository cloning, pulling and buildng Tool (Version 1.2)  -help

 Repos is a tool that automates the update procedure for Debian and Ubuntu based
 Linux systems.

 Press "q" to exit this Help page.

 Commands:    
    Running "repos" with no options will not do anything.

    repos --help = shows this help page.
    repos --help = shows this help page.
    repos --score <jobs> = build and install ossia score
    repos --ossia <jobs> = build and install ossia bindings for Pure data and openFrameworks
    repos --qt = install the latest Qt version with qtcreator
    repos --faust <jobs> = build and install the Faust programing langage
    repos --of <jobs> = build and install openFrameworks
    repos --supercollider <jobs> = build and install the Supercollider langage
    repos --sc3-plugins <jobs> = build and install plugins for Supercollider
    repos --ardour <jobs> = build and install the Ardour editor
    repos --zyn = = build and install the Zyn fusion synth
    repos --inscore <jobs> = build and install INscore and Gudio
    repos --osc = build and install open stage control insterfaces
    repos --rack <jobs> = build and install VCV Rack application and plugins
    repos --arduino = install the Arduino IDE with Teensy support
    repos --processing = install the processing IDE
    repos --pull pull all repositories
    repos --pull = pulls every repository and clears out build directory.
    repos --pull = pulls every repository and clears out build directory.
    
 By Joe Collins www.ezeelinux.com (GNU/General Public License version 2.0)
 
 Disclaimer:

 THIS SOFTWARE IS PROVIDED BY EZEELINUX “AS IS” AND ANY EXPRESS OR IMPLIED
 WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 EVENT SHALL EZEELINUX BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.

_EOF_

}

if [ ! -z "$2" ]; then 
    EXTRA_ARGS=$2
fi

if [ "$1" == "--qt" ]; then
    qt
    exit
fi

if [ "$1" == "--faust" ]; then
    faust
    exit
fi

if [ "$1" == "--score" ]; then
    score
    exit
fi

if [ "$1" == "--ossia" ]; then
    ossia
    exit
fi

if [ "$1" == "--sc" ]; then
    supercollider
    exit
fi

if [ "$1" == "--sc3-plugins" ]; then
    sc3-plugins
    exit
fi

if [ "$1" == "--ardour" ]; then
    ardour
    exit
fi

if [ "$1" == "--zyn" ]; then
    zyn
    exit
fi

if [ "$1" == "--guido" ]; then
    guido
    exit
fi

if [ "$1" == "--inscore" ]; then
    inscore
    exit
fi

if [ "$1" == "--osc" ]; then
    osc
    exit
fi

if [ "$1" == "--rack" ]; then
    rack
    exit
fi

if [ "$1" == "--arduino" ]; then
    arduino
    exit
fi

if [ "$1" == "--processing" ]; then
    processing
    exit
fi

if [ "$1" == "--of" ]; then
    of
    exit
fi

if [ "$1" == "--all" ]; then
    faust
    score
    ossia
    supercollider
    ardour
    zyn
    inscore
    osc
    rack
    arduino
    processing
    of
    exit
fi

if [ "$1" == "--help" ]; then
    repos_help
    exit
fi

if [ "$1" == "--pull" ]; then
    repos_pull
    exit
fi

exit
