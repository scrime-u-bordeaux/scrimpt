#!/bin/bash

export SRC_DIR="$HOME/Documents/repos"
export BUILD_DIR="$HOME/Documents/build"
export JOBS=1

cd $SRC_DIR

if [ ! -d "$BUILD_DIR" ]; then
    mkdir $BUILD_DIR
fi

faust() {

if [ ! -d "faust" ]; then
    git clone --recursive https://github.com/grame-cncm/faust.git -b master 
fi

(
cd faust/build
echo '
set ( ASMJS_BACKEND  OFF CACHE STRING  "Include ASMJS backend" FORCE )
set ( C_BACKEND      COMPILER STATIC DYNAMIC        CACHE STRING  "Include C backend"         FORCE )
set ( CPP_BACKEND    COMPILER STATIC DYNAMIC        CACHE STRING  "Include CPP backend"       FORCE )
set ( FIR_BACKEND    OFF        CACHE STRING  "Include FIR backend"       FORCE )
set ( INTERP_BACKEND OFF        CACHE STRING  "Include INTERPRETER backend" FORCE )
set ( JAVA_BACKEND   OFF        CACHE STRING  "Include JAVA backend"      FORCE )
set ( JS_BACKEND     OFF        CACHE STRING  "Include JAVASCRIPT backend" FORCE )
set ( LLVM_BACKEND   COMPILER STATIC DYNAMIC        CACHE STRING  "Include LLVM backend"      FORCE )
set ( OLDCPP_BACKEND OFF        CACHE STRING  "Include old CPP backend"   FORCE )
set ( RUST_BACKEND   OFF        CACHE STRING  "Include RUST backend"      FORCE )
set ( WASM_BACKEND   OFF   CACHE STRING  "Include WASM backend"  FORCE )
' > backends/llvm.cmake
)

(
cd $BUILD_DIR

if [ ! -d "faust" ]; then
   mkdir faust
fi

cd faust

cmake -C $SRC_DIR/faust/build/backends/llvm.cmake -DINCLUDE_STATIC=1 -DINCLUDE_OSC=1 -DINCLUDE_HTTP=1 -DINCLUDE_EXECUTABLE=1 $SRC_DIR/faust/build 
make -j$JOBS
sudo make install
)

}

score() {

sudo apt -y install qtbase5-dev qtbase5-dev-tools libportmidi0 libasound-dev mesa-common-dev libavahi-compat-libdnssd-dev lilv-utils qtquickcontrols2-5-dev libqt5serialport5-dev libavcodec-dev libavformat-dev libavfilter-dev libavdevice-dev libqt5serialport5-dev 

if [ ! -d "score" ]; then
    git clone --recursive https://github.com/OSSIA/score.git 
fi

if [ ! -d "score-user-library" ]; then
    git clone --recursive https://github.com/OSSIA/score-user-library.git
fi

(
cd $BUILD_DIR

if [ ! -d "score" ]; then
   mkdir score
fi

cd score

cmake $SRC_DIR/score -DSCORE_CONFIGURATION=static-release -DPORTAUDIO_ONLY_DYNAMIC=1
make all_unity -j$JOBS
rm -rf *.deb
cpack
sudo dpkg -i *.deb
)
 
}

ossia() {

if [ ! -d "score" ]; then
    score
fi

(
cd $BUILD_DIR

if [ ! -d "ossia-pd" ]; then
   mkdir ossia-pd
fi

cd ossia-pd

cmake $SRC_DIR/score/3rdparty/libossia -DOSSIA_PD_ONLY=1 -DOSSIA_PD_INSTALL_FOLDER=${HOME}/Documents/Pd/externals/ossia
make -j$JOBS
make install
)

}

supercollider() {

sudo apt -y install libavahi-client-dev libicu-dev libreadline6-dev libxt-dev qt5-qmake qttools5-dev-tools qtpositioning5-dev libqt5sensors5-dev libqt5opengl5-dev qtwebengine5-dev

if [ ! -d "supercollider" ]; then
    git clone --recursive https://github.com/supercollider/supercollider.git
fi

(
cd $BUILD_DIR

if [ ! -d "supercollider" ]; then
   mkdir supercollider
fi

cd supercollider

cmake $SRC_DIR/supercollider -DCMAKE_BUILD_TYPE=Release 
make -j$JOBS
sudo make install
)

sc3-plugins

}
 
sc3-plugins() {

if [ ! -d "sc3-pluginsHOA" ]; then
    git clone --recursive https://github.com/scrime-u-bordeaux/sc3-pluginsHOA.git
fi

if [ ! -d "adt" ]; then
    git clone https://bitbucket.org/ambidecodertoolbox/adt.git
    (
        cd adt
        octave adt_initialize
    )
fi

(
cd $BUILD_DIR

if [ ! -d "sc3-pluginsHOA" ]; then
   mkdir sc3-pluginsHOA
fi

cd sc3-pluginsHOA

cmake $SRC_DIR/sc3-pluginsHOA -DSC_PATH=$SRC_DIR/supercollider -DCMAKE_BUILD_TYPE=Release 
make -j$JOBS
sudo make install
)

}

ardour() {

sudo apt -y purge ardour
sudo apt -y install libgtkmm-2.4-dev autotools-dev cdbs dh-buildinfo devscripts libarchive-dev libaubio-dev libboost-dev libcppunit-dev libcurl3-gnutls libcurl4-gnutls-dev libglibmm-2.4-dev liblo-dev liblrdf0-dev libraptor2-dev librubberband-dev libsamplerate0-dev libsratom-dev libserd-dev libsord-dev libtag1-dev libcwiid-dev libxml2-dev itstool vamp-plugin-sdk

if [ ! -d "ardour" ]; then
    git clone --recursive https://github.com/ardour/ardour.git
fi

(
cd ardour

git checkout tags/5.12

sudo ./waf uninstall
./waf configure --freedesktop --lxvst --lv2 --ptformat --nls --optimize --with-backend=alsa,jack,dummy 
./waf build -j$JOBS
sudo ./waf install
./tools/videotimeline/install_video_tools.sh 
)

}

zyn() {

sudo apt -y install ruby libtool libmxml-dev automake libz-dev mesa-common-dev libgl1-mesa-dev libfontconfig1-dev bison

if [ ! -d "zyn-fusion-build" ]; then
    git clone --recursive https://github.com/zynaddsubfx/zyn-fusion-build.git
fi

(
cd zyn-fusion-build

ruby build-linux.rb
tar -jxvf zyn-fusion-linux-64bit-3.0.3-patch1-release.tar.bz2
cd zyn-fusion
sudo bash ./install-linux.sh
)

}

guido() {

if [ ! -d guidolib ]; then
    git clone https://github.com/grame-cncm/guidolib.git 
fi

(
cd guidolib

cd $BUILD_DIR

if [ ! -d "guidolib" ]; then
   mkdir guidolib
fi

cd guidolib

cmake $SRC_DIR/guidolib/build -DGL=0 -DSTATICLIB=1 -DCMAKE_BUILD_TYPE=release
make -j$JOBS
sudo make install
)

if [ ! -d guidoar ]; then
   git clone https://github.com/grame-cncm/guidoar.git
fi

(
cd guidoar
git checkout dev

cd $BUILD_DIR

if [ ! -d "guidoar" ]; then
   mkdir guidoar
fi

cd guidoar

cmake $SRC_DIR/guidoar/build -DCMAKE_BUILD_TYPE=release
make -j$JOBS
sudo make install
)

}

inscore() {

sudo apt -y install qtmultimedia5-dev libqt5multimedia5-plugins

if [ ! -d "inscore" ]; then
    git clone --recursive https://github.com/grame-cncm/inscore.git
fi

(
cd inscore

git checkout dev
cd build 
make -j$JOBS
sudo mv bin/inscoreviewer /usr/bin
sudo mv bin/lib* /usr/lib
)

}

osc() {

sudo apt -y install nodejs npm chromium-browser

if [ ! -d "open-stage-control" ]; then
    git clone https://github.com/jean-emmanuel/open-stage-control.git
fi

(
cd open-stage-control

npm install

export PLATFORM=linux
npm run build
npm run package

rm -rf dist/open-stage-control-linux-x64/*.deb
npm run deb64
sudo dpkg -i dist/open-stage-control-linux-x64/*.deb
)

}

rack() {

sudo apt -y install gdb libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zlib1g-dev libgtk2.0-dev jq

if [ ! -d "Rack" ]; then
    git clone --recursive https://github.com/VCVRack/Rack.git
fi

(
cd Rack/dep

make clean
cd ..
make dep -j$JOBS

cd plugins
vcvPlugs -j$JOBS
cd ..

if [ ! -d "Bridge" ]; then
    git clone --recursive https://github.com/scrime-u-bordeaux/Bridge.git
fi

cd Bridge/VST

if [ ! -d "VST2_SDK" ]; then
    wget https://archive.org/download/VST2SDK/vstsdk2_4.zip
    unzip vstsdk2_4.zip
    mv vstsdk2.4 VST2_SDK
fi

make clean
make dist -j$JOBS
sudo make install

cd ../../

make clean
make -j$JOBS
sudo mv Rack /usr/bin
cp Core.json ~/.Rack
cp -r res ~/.Rack
)

}

if [ ! -z "$2" ]; then 
    JOBS=$2
fi

if [ "$1" == "--faust" ]; then
    faust
    exit
fi

if [ "$1" == "--score" ]; then
    score
    exit
fi

if [ "$1" == "--ossia" ]; then
    ossia
    exit
fi

if [ "$1" == "--supercollider" ]; then
    supercollider
    exit
fi

if [ "$1" == "--sc3-plugins" ]; then
    sc3-plugins
    exit
fi

if [ "$1" == "--ardour" ]; then
    ardour
    exit
fi

if [ "$1" == "--zyn" ]; then
    zyn
    exit
fi

if [ "$1" == "--guido" ]; then
    guido
    exit
fi

if [ "$1" == "--inscore" ]; then
    inscore
    exit
fi

if [ "$1" == "--osc" ]; then
    osc
    exit
fi

if [ "$1" == "--rack" ]; then
    rack
    exit
fi

if [ "$1" == "--all" ]; then
    faust
    score
    ossia
    supercollider
    ardour
    zyn
    guido
    inscore
    osc
    rack
    exit
fi

exit

